给定一个有正整数组成的数列，日光能够剔除一个元素，使其数列有序，则输出这个元素，否则输出-1、
有序，即要么递增要么递减（不需要严格递增或递减，如（1 2 2 3）满足递增）

注意：
如果原数组已经有序，直接输出-1
如果方案有多个，则输出被剔除元素最小的那个

输入：
2
2 1
输出-1

输入 5
1 3 2 4 4
输出2


参考解法：
include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool checkArrayConsistent(vector <int> array)
{
    vector <int> oper = array;
    vector <int> oper2 = array;
    sort(oper.begin(), oper.end());
    sort(oper2.begin(), oper2.end(), greater<int>());
    if ((array == oper) || (array == oper2)) {
        return true;
    }

    return false;
}

int main()
{
    int num;
    vector <int> input;
    vector <int> eraseArray;

    cin >> num;
    for (int loop = 0; loop < num; loop++) {
        int val;
        cin >> val;
        input.push_back(val);
    }

    // 先确定序列是否本身就是有序的，原来就有序，就输出-1
    if (checkArrayConsistent(input)) {
        cout << -1 << endl;
        return 0;
    }

    // 逐个剔除元素，如果全试过之后，有元素剔除可以实现有序，则把这个元素记下来到另外一个数组eraseArray
    for (int loop = 0; loop < num; loop++) {
        vector <int> subNums = input;
        subNums.erase(subNums.begin() + loop);
        if (checkArrayConsistent(subNums)) {
            eraseArray.push_back(input[loop]);
        }
    }

    // 对数组进行排序，取最小的输出
    if (eraseArray.size() != 0) {
        sort(eraseArray.begin(), eraseArray.end());
        cout << eraseArray[0] << endl;
        return 0;
    }

    cout << -1 << endl;
    return 0;
}
